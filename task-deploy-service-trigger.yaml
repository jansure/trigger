apiVersion: devops.alauda.io/v1alpha1
kind: ClusterPipelineTaskTemplate
metadata:
  name: deployServiceTrigger
  annotations:
    displayName.zh-CN: 应用部署触发器
    displayName.en: Deploy Application Trigger
    description.zh-CN: 应用部署触发器
    description.en: Deploy Application Trigger
    readme.zh-CN: 应用部署触发器
    readme.en: Deploy Application Trigger
    version: "4.0.22"
  labels:
    category: CD
spec:
  engine: gotpl
  body: |+
    script{
        env.CREDENTIAL_ID = ""
        def credentialCopy
        def newImage = [:]
        def containerName = ""
        def pipelineName = ''

        def baseDomain = 'alauda.io'

        if(alaudaContext.getItem('basedomain') != '') {
            baseDomain = alaudaContext.getItem('basedomain')
        }

        def annoRepository = baseDomain + '/pipeline-coderepository'
        def annoPipelineCommit = baseDomain + '/pipeline-commit'
        def annoPipelineAuthor = baseDomain + '/pipeline-author'
        def annoPipelineCommitMessage = baseDomain + '/pipeline-commit-message'
        def annoPipelineConfigName = baseDomain + '/pipeline-config-name'
        def annoPipelineBuildNumber = baseDomain + '/pipeline-build-number'

        def repositoryPath = ""
        def repositoryTag = ""
        def repositoryCredentialId = ""
        def secretNamespace = ""

        {{if eq .imageRepositoryMode "choice"}}
          repositoryPath = "{{.imageRepositoryDeployChoice.repositoryPath}}"
          repositoryTag = "{{.imageRepositoryDeployChoice.tag}}"
          repositoryCredentialId = "{{.imageRepositoryDeployChoice.credentialId}}"
          secretNamespace = "{{.imageRepositoryDeployChoice.secretNamespace}}"
        {{end}}
        {{if eq .imageRepositoryMode  "input"}}
          repositoryPath = "{{.imageRepositoryDeployInput}}"
          repositoryTag = "{{.sourceImageTag}}"
          repositoryCredentialId = "{{.sourceCredentialId}}"
        {{end}}

        newImage['name'] = repositoryPath
        if(repositoryTag == "") {
          newImage['tag'] = 'latest'
        }
        else {
          def tagwithcomma = repositoryTag
          def tags = tagwithcomma.split(",")
          newImage['tag'] = "${tags[0]}"
        }

        env.NEW_IMAGE = "${newImage.name}:${newImage.tag}"

        if (repositoryCredentialId != "") {
          env.CREDENTIAL_ID = repositoryCredentialId
          if(secretNamespace != "") {
            env.CREDENTIAL_ID = env.CREDENTIAL_ID.replaceFirst("{{.}}-","")
            try{
              credentialCopy = alaudaDevops.withCluster(){
                alaudaDevops.withProject("{{.}}") {
                alaudaDevops.selector('secret', env.CREDENTIAL_ID).object()
              }
            }
            credentialCopy.namespace = "{{.}}"
            credentialCopy.name = env.CREDENTIAL_ID
            } catch(err) {
              error err.getMessage()
            }
          }
        }

        if(repositoryCredentialId != "") {
        def shouldUpdate = true
        if(credentialCopy != null) {
            def clusterCrendential
            try{
                clusterCrendential = alaudaDevops.selector("secret", env.CREDENTIAL_ID).object()
            } catch(err) {
                echo err.getMessage()
            }
            /* same namespace same resourceVersion */
            if (clusterCrendential != null && credentialCopy.namespace == "{{.namespace}}" && clusterCrendential.metadata.resourceVersion==credentialCopy.metadata.resourceVersion) {
                shouldUpdate = false
            }

            if (shouldUpdate) {
                credentialCopy.name = credentialCopy.name + "-devops-copy"
                credentialCopy.namespace="{{.namespace}}"
                credentialCopy.metadata.name=credentialCopy.name
                credentialCopy.metadata.namespace=credentialCopy.namespace
                credentialCopy.metadata.remove("resourceVersion")
                credentialCopy.metadata.remove("creationTimestamp")
                credentialCopy.metadata.remove("selfLink")
                credentialCopy.metadata.remove("uid")
            }
          }
        }

        alaudaDevops.withCluster('{{.clusterName}}') {
            alaudaDevops.withProject('{{.namespace}}') {
                pipelineName = alaudaContext.getName()
            }
        }

        {{- if .createApp  }}
        containerName = "{{.container}}"
        def commonAppLabelKey = 'app.' + baseDomain + '/name'
        def commonAppLabelValue = pipelineName + '.' + '{{.namespace}}'
        // firstly, we need check label value length
        if(commonAppLabelValue.length() > 63) {
            def msg = pipelineName + " should have max of " + (62-pipelineName.length()) + " characters"
            error msg
        }

        def commonJobBaseNameKey = 'JOB_BASE_NAME'
        def commonBuildIDKey = 'BUILD_ID'
        def hasKustomization = false
        def image = newImage
        dir(RELATIVE_DIRECTORY) {
          timeout(time:{{.timeout}}, unit: "SECONDS"){
              container('tools') {
                def deployConfigFolder = '{{.deployConfigFolder}}'
                deployConfigFolder = deployConfigFolder.startsWith('./') ? deployConfigFolder-'./' : deployConfigFolder
                deployConfigFolder = deployConfigFolder.length() == 0 ? '**' : deployConfigFolder+'/**'
                final files = findFiles(glob: deployConfigFolder)
                def userResources = []
                for(file in files) {
                    userResources.add(file.name)
                }
                if(userResources.size() < 1) {
                    error "Create Application failed, check the resources in your deploy config directory"
                }

                for(resource in userResources) {
                    if(resource == 'kustomization.yaml' || resource == 'kustomization.yml' || resource == 'Kustomization') {
                        hasKustomization = true
                        def userKustomizatioLocation = '{{.deployConfigFolder}}/'+resource
                        def userKustomization = readYaml file: userKustomizatioLocation
                        sh """
                          rm ${userKustomizatioLocation}
                        """
                        if(userKustomization.commonLabels == null) {
                            userKustomization.commonLabels = [:]
                        }
                        if(userKustomization.commonAnnotations == null) {
                            userKustomization.commonAnnotations = [:]
                        }
                        userKustomization.commonLabels[commonAppLabelKey] = commonAppLabelValue
                        userKustomization.commonAnnotations[commonJobBaseNameKey] = env.JOB_BASE_NAME
                        userKustomization.commonAnnotations[commonBuildIDKey] = env.BUILD_ID

                        userKustomization.commonAnnotations[annoRepository] = env.CODE_REPO
                        userKustomization.commonAnnotations[annoPipelineCommit] = env.SCM_COMMIT
                        userKustomization.commonAnnotations[annoPipelineAuthor]= env.SCM_AUTHOR
                        userKustomization.commonAnnotations[annoPipelineCommitMessage]= env.SCM_COMMIT_INFO
                        userKustomization.commonAnnotations[annoPipelineConfigName]= pipelineName
                        userKustomization.commonAnnotations[annoPipelineBuildNumber]= env.BUILD_NUMBER

                        userKustomization.namespace = "{{.namespace}}"
                        writeYaml file: userKustomizatioLocation, data: userKustomization
                    }
                }
                if (!hasKustomization) {
                    template = [
                      'resources': userResources,
                      'commonLabels': [
                        (commonAppLabelKey): commonAppLabelValue
                      ],
                      'commonAnnotations': [
                        (commonJobBaseNameKey): env.JOB_BASE_NAME,
                        (commonBuildIDKey): env.BUILD_ID,
                        (annoRepository): env.CODE_REPO,
                        (annoPipelineCommit): env.SCM_COMMIT,
                        (annoPipelineAuthor): env.SCM_AUTHOR,
                        (annoPipelineCommitMessage): env.SCM_COMMIT_INFO,
                        (annoPipelineConfigName): pipelineName,
                        (annoPipelineBuildNumber): env.BUILD_NUMBER,
                      ],
                      'namespace': '{{.namespace}}'
                    ]

                    writeYaml file: '{{.deployConfigFolder}}/kustomization.yaml', data: template
                }

                sh script: """
                  ls -l {{.deployConfigFolder}}
                  cat {{.deployConfigFolder}}/kustomization.yaml
                  kustomize build {{.deployConfigFolder}} > devops-deploy.yaml
                """, label: "Generate user deploy resources by kustomize"

                alaudaDevops.withCluster('{{.clusterName}}') {
                    alaudaDevops.withProject('{{.namespace}}') {
                      if (credentialId !=null ) {
                        if(credentialCopy != null && shouldUpdate) {
                            alaudaDevops.apply(credentialCopy, "--validate=false")
                        }
                      }

                      def userDeploy = readYaml file: 'devops-deploy.yaml'
                      // check user deploy resource count due to readYaml limit(one yaml return LinkedHashMap, multi return LinkedList)
                      if(userDeploy instanceof java.util.LinkedHashMap) {
                          userDeploy = [userDeploy]
                      }
                      def workloads = ['Deployment', 'DaemonSet', 'StatefulSet']
                      def hasApplication = false
                      // whether user's app name equals to pipelineName
                      def diffAppName = ''
                      def applicationCount = 0
                      for(subResource in userDeploy) {
                          if(subResource.metadata.labels == null) {subResource.metadata.labels = [:]}
                          subResource.metadata.labels[commonAppLabelKey] = commonAppLabelValue
                          def hasContainer = false
                          if(subResource.kind != null && workloads.contains(subResource.kind)) {
                              for(c in subResource.spec.template.spec.containers) {
                                  if(c.name == '{{.container}}') {
                                      hasContainer = true
                                      c.image = image['name'] + ':' + image['tag']
                                  }
                              }

                              if(hasContainer && credentialCopy != null) {
                                  if(subResource.spec.template.spec.imagePullSecrets != null) {
                                      def notFound = true
                                      for(secret in subResource.spec.template.spec.imagePullSecrets) {
                                          if(secret.name == credentialCopy.name) {
                                              notFound = false
                                              break
                                          }
                                      }
                                      if(notFound) {
                                          subResource.spec.template.spec.imagePullSecrets[subResource.spec.template.spec.imagePullSecrets.size()] = ['name': credentialCopy.name]
                                      }
                                  } else {
                                      subResource.spec.template.spec.imagePullSecrets = [['name': credentialCopy.name]]
                                  }
                              }
                          }
                          // user defines application
                          if(subResource.kind == 'Application') {
                              hasApplication = true
                              applicationCount++
                              if (applicationCount >= 2) {
                                  error "Create application doses not support create multi applications"
                              }

                              if(subResource.metadata.name != pipelineName) {
                                  diffAppName = subResource.metadata.name
                              }
                          }
                    }

                    if(diffAppName != '') {
                        commonAppLabelValue = diffAppName + '.' + '{{.namespace}}'
                        for(subResource in userDeploy) {
                            subResource.metadata.labels[commonAppLabelKey] = commonAppLabelValue
                            if(subResource.spec != null) {
                                if(subResource.spec.selector != null && subResource.spec.selector.matchLabels != null) {
                                    subResource.spec.selector.matchLabels[commonAppLabelKey] = commonAppLabelValue
                                }
                                if (subResource.spec.template != null && subResource.spec.template.metadata != null && subResource.spec.template.metadata.labels != null) {
                                    subResource.spec.template.metadata.labels[commonAppLabelKey] = commonAppLabelValue
                                }
                            }
                        }
                    }

                    for(subResource in userDeploy) {
                        if(subResource.kind == 'Application') {
                            if(subResource.spec.selector.matchLabels == null) {subResource.spec.selector.matchLabels = [:]}
                            subResource.spec.selector.matchLabels[commonAppLabelKey] = subResource.metadata.labels[commonAppLabelKey]
                        }
                    }

                    echo "### Kubernetes apply resources ###"
                    echo "${userDeploy}"
                    alaudaDevops.apply(userDeploy, "--validate=false")

                    if(!hasApplication) {
                        def app = [
                            'kind': 'Application',
                            'spec': [
                                'componentKinds': [],
                                'descriptor': [:],
                                'assemblyPhase': 'Succeeded',
                                'selector':[
                                    'matchLabels':[
                                        (commonAppLabelKey): commonAppLabelValue
                                    ]
                                ]
                            ],
                            'apiVersion': 'app.k8s.io/v1beta1',
                            'metadata': [
                                'name': pipelineName,
                                'namespace': '{{.namespace}}',
                                'annotations': [
                                   (annoRepository): env.CODE_REPO,
                                   (annoPipelineCommit): env.SCM_COMMIT,
                                   (annoPipelineAuthor): env.SCM_AUTHOR,
                                   (annoPipelineCommitMessage): env.SCM_COMMIT_INFO,
                                   (annoPipelineConfigName): pipelineName,
                                   (annoPipelineBuildNumber): env.BUILD_NUMBER,
                              ]
                            ]
                        ]
                        for(subResource in userDeploy) {
                            def group = ''
                            def apiVersion = subResource.apiVersion.split('/')
                            if(apiVersion.size() == 2) {
                                group = apiVersion[0]
                            }
                            app.spec.componentKinds.add(['kind': subResource.kind, 'group': group])
                        }

                        alaudaDevops.apply(app, "--validate=false")
                    }
                  }
                }
              }
          }
        }

        {{- else }}
        containerName = "{{.containerName}}"
        container('tools') {
            // resource selector object after deployed
            def deployedSelector = null
            timeout(time:{{.timeout}}, unit: "SECONDS"){
            try {
              alaudaDevops.withCluster("{{.clusterName}}"){
                  alaudaDevops.withProject("{{.namespace}}") {
                     {{$arr := split .serviceName ":"}}

                     def app = alaudaDevops.selector('application', '{{index $arr 0}}').object()
                     if (env.FROM_SCM){
                         app.metadata.annotations[annoRepository] = env.CODE_REPO
                         app.metadata.annotations[annoPipelineCommit] = env.SCM_COMMIT
                         app.metadata.annotations[annoPipelineConfigName] = pipelineName
                         app.metadata.annotations[annoPipelineBuildNumber] = env.BUILD_NUMBER
                         app.metadata.annotations[annoPipelineAuthor] = env.SCM_AUTHOR
                         app.metadata.annotations[annoPipelineCommitMessage] = env.SCM_COMMIT_INFO
                      }

                     alaudaDevops.apply(app, "--validate=false")

                     def p = alaudaDevops.selector('{{index $arr 1}}', '{{index $arr 2}}').object()
                     p.metadata.labels['BUILD_ID']=env.BUILD_ID
                     p.metadata.labels['JOB_BASE_NAME']=env.JOB_BASE_NAME
                     if (env.FROM_SCM){
                         p.metadata.annotations[annoRepository] = env.CODE_REPO
                         p.metadata.annotations[annoPipelineCommit] = env.SCM_COMMIT
                         p.metadata.annotations[annoPipelineAuthor]= env.SCM_AUTHOR
                         p.metadata.annotations[annoPipelineCommitMessage]= env.SCM_COMMIT_INFO
                         p.metadata.annotations[annoPipelineConfigName]= pipelineName
                         p.metadata.annotations[annoPipelineBuildNumber]= env.BUILD_NUMBER
                    }

                     for(container in p.spec.template.spec.containers) {
                        if(container.name == "{{.containerName}}"){
                            container.image = "${NEW_IMAGE}"
                            def cmd = "{{.command}}"
                            def args = "{{.args}}"

                            if(cmd!=""){
                            container.command = [cmd]
                            }
                            if(args!=""){
                            container.args = [args]
                            }
                            break
                        }
                     }

                     if(credentialCopy != null) {
                          if(p.spec.template.spec.imagePullSecrets != null) {
                              def notFound = true
                              for(secret in p.spec.template.spec.imagePullSecrets) {
                                  if(secret == credentialCopy.name){
                                      notFound = false
                                      break
                                  }
                              }
                              if(notFound) {
                                  p.spec.template.spec.imagePullSecrets[p.spec.template.spec.imagePullSecrets.size()] = [name: credentialCopy.name]
                              }
                          }else{
                              p.spec.template.spec.imagePullSecrets = [[name: credentialCopy.name]]
                          }
                     }

                     p.spec.template.metadata.labels['BUILD_ID']=env.BUILD_ID
                     p.spec.template.metadata.labels['JOB_BASE_NAME']=env.JOB_BASE_NAME
                     if(repositoryCredentialId != "") {
                      if(credentialCopy != null && shouldUpdate) {
                        alaudaDevops.apply(credentialCopy, "--validate=false")
                      }
                     }
                     alaudaDevops.apply(p, "--validate=false")
                     deployedSelector = alaudaDevops.selector('{{index $arr 1}}', '{{index $arr 2}}')
                     // block until success or timeout
                     deployedSelector.rollout().status()
                 }
              }
            } catch(err) {
              {{- if .rollback }}
              // roll back application if it has been deployed
              if(deployedSelector != null) {
                  echo "### Deploy application success, but container got error, starting rollback now ###"
                  alaudaDevops.withCluster("{{.clusterName}}"){
                    alaudaDevops.withProject("{{.namespace}}"){
                        deployedSelector.rollout().undo()
                        // special extra logic for StatefulSet
                        // due to https://github.com/kubernetes/kubernetes/issues/67250
                        def object = deployedSelector.object()
                        if(object.kind == 'StatefulSet') {
                            def oldReplicas = object.spec.replicas
                            deployedSelector.scale("--replicas=0")
                            deployedSelector.scale("""--replicas=${oldReplicas}""")
                        }
                    }
                  }
                  echo "### Application rollback done ###"
              }
              {{- end }}
              {{- if not .rollback }}
              echo "### Update application failed due to check status of rollout not completed  ###"
              {{- end }}
              error err.getMessage()
            }
          }
        }
        {{- end }}

        def svcName = "{{.serviceName}}"
        if(svcName == "") {
          svcName = pipelineName as String;
        }
        alaudaPipeline.appendInfo(STAGE_NAME, [createApp: {{.createApp}}, clusterName: "{{.clusterName}}", namespace: "{{.namespace}}", serviceName: svcName,containerName: containerName as String, image: "${NEW_IMAGE}" as String], '_Deploy')
    }
  arguments:
    - name: createApp
      schema:
        type: boolean
      default: "false"
      display:
        type: boolean
        name:
          zh-CN: "创建应用"
          en: "create application"
        description:
          zh-CN: "关闭为更新已有应用；如开启，请将YAML、JSON资源文件放置在所选代码仓库中，应用将在下面选择的集群和命名空间下创建，创建后首次执行流水线为创建应用、后续为更新应用"
          en: "Close to update existing applications. Such as open, please place the YAML, JSON resource files in the selected code warehouse, applications will be created under the selected cluster and namespace, created for the first time to perform assembly line for creating applications, subsequent to update application"
    - name: clusterName
      schema:
        type: string
      display:
        type: alauda.io/clustername
        name:
          zh-CN: "集群"
          en: "cluster"
        description:
          zh-CN: "应用所在的集群"
          en: "cluster"
      required: true
    - name: namespace
      schema:
        type: string
      display:
        type: alauda.io/namespace
        name:
          zh-CN: "命名空间"
          en: "namespace"
        description:
          zh-CN: "应用所在的命名空间"
          en: "namespace"
        related: clusterName
      required: true
    - name: serviceName
      schema:
        type: string
      display:
        type: alauda.io/servicenamemix
        name:
          zh-CN: "应用"
          en: "application"
        description:
          zh-CN: "应用名称、组件类型、组件名称"
          en: "application"
        related: namespace
      required: true
      relation:
        - action: hidden
          when:
            name: createApp
            value: true
    - name: containerName
      schema:
        type: string
      display:
        type: alauda.io/containername
        name:
          zh-CN: "容器"
          en: "container"
        description:
          zh-CN: "需要更新的容器实例名称"
          en: "The name of the container instance that needs to be updated"
        related: serviceName
      required: true
      relation:
        - action: hidden
          when:
            name: createApp
            value: true
    - name: deployConfigFolder
      schema:
        type: string
      display:
        type: string
        name:
          zh-CN: "部署配置目录"
          en: "Deploy Configuration Directory"
        description:
          zh-CN: "1.所选代码仓库中YAML、JSON文件的路径，如'a/b/c'，为避免出错，请尽可能保证所选文件夹下仅包含YAML、JSON的Kubernetes资源文件; 2.创建应用仅支持单应用创建，如YAML、JSON文件中存在多个应用的定义，则会创建失败"
          en: "1.The path to the YAML and JSON files in the selected code repository, such as 'a/b/c', as much as possible to avoid errors, please ensure that the selected folder contains only the Kubernetes YAML, JSON resource files; 2.Creating a reference that only supports single-app creation, such as a definition of multiple apps in YAML, JSON files, will fail to be created"
      required: true
      relation:
        - action: show
          when:
            name: createApp
            value: true
    - name: container
      schema:
        type: string
      display:
        type: string
        name:
          zh-CN: "容器"
          en: "container"
        description:
          zh-CN: "构建出的镜像运行的容器名"
          en: "The name of the container in which the image is run"
      required: true
      relation:
        - action: show
          when:
            name: createApp
            value: true
    - name: imageRepositoryMode
      schema:
        type: string
        enum:
          - "choice"
          - "input"
      binding:
        - deployService.args.imageRepositoryMode
      display:
        type: radio
        advanced: false
        name:
          zh-CN: "方式"
          en: "Source Image Mode"
        enumAlias:
          - "选择"
          - "输入"
        description:
          zh-CN: "镜像仓库地址输入方式。例：选择"
          en: "Source Image Repository Mode."
      required: true
      default: "choice"
      value: "choice"
    - name: "imageRepositoryDeployChoice"
      schema:
        type: imageRepositoryList
      required: true
      display:
        type: imageRepositoryList
        name:
          zh-CN: "镜像仓库"
          en: Repository
        description:
          zh-CN: "选择或者输入镜像仓库"
          en: "image repo"
      relation:
        - action: show
          when:
            name: imageRepositoryMode
            value: "choice"
    - name: "imageRepositoryDeployInput"
      schema:
        type: string
      required: true
      display:
        type: string
        name:
          zh-CN: "镜像仓库"
          en: Repository
        description:
          zh-CN: "选择或者输入镜像仓库"
          en: "image repo"
      relation:
        - action: show
          when:
            name: imageRepositoryMode
            value: "input"
    - name: "sourceImageTag"
      schema:
        type: string
      display:
        type: string
        advanced: false
        name:
          zh-CN: "更新标签"
          en: "Update image tag"
        description:
          zh-CN: "更新应用的版本。例：latest"
          en: "When synchronizing the apps, enter the version of the apps, for example, latest."
      required: false
      default: ${imageTag}
      value: ""
    - name: "sourceCredentialId"
      schema:
        type: string
      display:
        type: alauda.io/jenkinscredentials
        args:
          type: kubernetes.io/dockerconfigjson
        name:
          zh-CN: "凭据"
          en: "Credentials"
        description:
          zh-CN: "更新应用时需要拉取镜像所使用的凭据"
          en: "Source Image Repository Credentials"
      required: false
      value: ""
    - name: "rollback"
      schema:
        type: boolean
      required: false
      display:
        type: boolean
        name:
          zh-CN: "失败后回滚"
          en: "rollbackOnFailure"
        description:
          zh-CN: "更新应用后，如应用不能正常运行，则回滚到更新前的版本"
          en: "After updating application, such as application cannot run normally, roll back to the previous of the updated version"
      relation:
        - action: hidden
          when:
            name: createApp
            value: true
    - name: "command"
      schema:
        type: string
      required: false
      display:
        type: string
        advanced: true
        name:
          zh-CN: "启动命令"
          en: "command"
        description:
          zh-CN: "即 command，相当于 Dockerfile 中的 ENTRYPOINT 命令。如果没有指定启动命令，将使用容器镜像中的 ENTRYPOINT"
          en: "command"
      relation:
        - action: hidden
          when:
            name: createApp
            value: true
    - name: "args"
      schema:
        type: string
      required: false
      display:
        type: string
        advanced: true
        name:
          zh-CN: "参数"
          en: "args"
        description:
          zh-CN: "即 args，相当于 Dockerfile 中的 CMD，负责提供启动命令的命令参数。如果没有指定参数，将使用容器镜像中的 CMD"
          en: "args"
      relation:
        - action: hidden
          when:
            name: createApp
            value: true
    - name: timeout
      schema:
        type: string
      display:
        type: string
        name:
          zh-CN: "超时时间（秒）"
          en: "Timeout (s)"
        description:
          zh-CN: "当前任务的执行时间若超过超时时间，则会中止任务，流水线变为失败状态"
          en: "timeout"
      required: true
  dependencies:
    plugins:
      - name: alauda-devops-pipeline
        version: "1.0.0"
      - name: workflow-basic-steps
        version: "2.9"
  view:
    markdown: |-
      {{ if eq $item.type "_Deploy"}}
      ## {{$item.name}}
      
      | Name | Value |
      | :--- | :---- |
      | 集群 | {{$item.value.clusterName}} |
      | 命名空间 | {{$item.value.namespace}} |
      | 应用 | {{$item.value.serviceName}} |
      | 容器 | {{$item.value.containerName}} |
      | 镜像地址 | {{$item.value.image}} |
      
      {{ end}}